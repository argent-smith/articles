* Пара слов о себе
* Стандартный вопрос — как ты попал в айти? Как давно и чем занимаешься?
* Давай поговорим про ocaml
  1. [ ] Небольшое введение в язык
  2. [ ] Немного истории языка
     1) [ ] 1970-е (1972) ML и Робин Мильнер: диалект Лиспа, док-во
        теорем и метаязык логики вычисляемых функций (ML),
        компилятор к 1980
     2) [ ] Ги Кузино (Guy Cousineau) добавил в язык алгебраические
        типы данных и сопоставление с образцом и определил ML в виде
        категориальной абстрактной машины (CAM). Дальнейшим
        развитием был созданный к 1987 году Аскандером Суарецом
        (Ascánder Suárez) и продолженный Пьером Вейсом (Pierre Weis)
        и Мичелом Мони (Michel Mauny) язык *Caml* (переигранное
        CAM-ML)
     3) [ ] 1990, Ксавье Лерой (Xavier Leroy) и Дамьен Долигез
        (Damien Doligez) выпустили новую реализацию, названную Caml
        Light. В этой реализации на Си использовался интерпретатор
        байт-кода и быстрый сборщик мусора. С написанием библиотек,
        язык стал использоваться в образовании и исследовательских
        институтах. 1995, компилятор в машинные коды, что поставило
        эффективность исполняемого кода в один ряд с другими
        компилируемыми языками. В то же время была разработана
        система модулей, идея которой была заимствована из Standard
        ML.
     4) [ ] 1996, Дидье Реми (Didier Rémy) и Джером Вуйон (Jérôme
        Vouillon) реализовали для языка стройную и эффективную
        поддержку объектов. Эта объектная система позволяет на этапе
        компиляции в типобезопасной манере использовать идиомы
        объектно-ориентированного программирования, без свойственным
        C++ и Java проверок времени выполнения.
     5) [ ] 2000-е -- наработка библиотек, поддержка аппаратных платформ.
  3. [ ] Основные парадигмы языка и ключевые концепции
     1) [ ] FP, Strict-механика и вытекающие из этого последствия
     2) [ ] Связывание переменных и лексические скоупы для связывания
     3) [ ] Функции (произв. к-во аргументов, лейбл-аргументы); 1st
        class functions, карринг (частное применение); специальные
        синтаксисты: инфиксные функции, рекурсивные функции; хвостатая рекурсия
     4) [ ] Типы -- базовые, алгебраические; система Хиндли-Милнера, опциональные аннотации типов
     5) [ ] ООП-слой. Реализован поверх статической проверки типов
        при компиляции, различает собственно ООП и типы объектов (ad
        hoc) и КОП (классы и их язык)
     6) [ ] Императивные элементы в базовом языке и сопутствующие
        эстетические последствия
     7) [ ] Язык модулей, функторы (1st class modules)
     8) [ ] Инструментарий для синтаксического расширения
        (собственные DSL), ppx и великий whitequark
     9) [ ] Инструментарий для создания парсеров/лексеров и
        т.п. (пользовательские DSL)
     10) [ ] "хипстерские" тулзы типа OPAM и toplevel/utop
  4. [ ] Сферы применения языка. Как ты думаешь, для каких задач
     ocaml подходит лучше всего? Какие преимущества у него по
     сравнению с другими языками в контексте этих задач?
     1) [ ] de jure: любые задачи, связанные с построением быстрых,
        компактных и надёжных систем (финтех, блокчейн,
        криптография, клиент-сервер, ОС (Mirage et al., Docker),
        работа с языками -- Facebook)
     2) [ ] de facto: есть проблемы с Multicore Parallelism. Точнее,
        "из коробки" он не поддерживается. Есть экспериментальный
        Multicore OCaml, он потихонечку развивается.
  5. [ ] Ocaml и другие языки:
     1) [ ] У тебя есть опыт с ruby, perl, java. Как думаешь, с какими языками есть сходства?
        * [ ] Ни с какими. Мысль об "иных языках" и роли их
          изучения. Ссылка на собственный FP-опыт.
        * [ ] Декларативный язык как особый способ программистского
          мышления. Элементы декларативного программирования в Ruby,
          Python, JS
     2) [ ] Как думаешь, с каких языков проще/сложнее перейти на ocaml? и стоит ли? :)
        * [ ] стоит ли -- вопрос творчества, развития ума и
          бизнеса. Мысль про достаточно низкий порог входа и отсылка
          к хорошей грамотной документации.
        * [ ] Откуда -- Как ни странно, с JS, Ruby или Python -- отовсюду, где
          есть синтаксически выраженная FP-семантика (лямбды и всё
          такое). FP-языки -- любой по вкусу.
  6. [ ] Экосистема ocaml:
     1) [ ] Какие если различные инструменты для работы с языком:
        * [ ] IDE
          * [ ] EMACS, Vim -- соотв. моды
          * [ ] Merlin -- браузер типов, линтер и вообще
            гипертулза. Стыкуется с вышеперечисленным соотв. плагинами.
        * [ ] Пакетные менеджеры и прочее
          * [ ] OPAM -- "gem" для OCAML
          * [ ] OASIS -- управление проектом и сборка ("bundle")
     2) [ ] Комьюнити вокруг языка
        * [ ] Своеобразие коммьюнити. IRC и maillist-ы
  7. [ ] Может ты знаешь про какие-то success story с использоваем ocaml. Будет интересно послушать
     * [ ] M$: F#
     * [ ] FB:
       + [ ] Hack (php)
       + [ ] Flow (js)
       + [ ] ReasonML (суперсет OCaml)
     * [ ] Haxe
     * [ ] Docker (комп-ты из MirageOS/XE N)
     * [ ] Citrix/XEN
     * [ ] MirageOS/Unikernels
     * [ ] JaneStreet
     * [ ] Coq
     * [ ] Unison
  8. [ ] Как думаешь, почему язык не получил широкого распространения?
     * [ ] Философский вопрос из рода "есть ли жизнь вне Python
       (Ruby, Java, JS и т.п.) Суровые гномы OCaml-а и их пещеры
     * [ ] По существу: нишевость (системное и
       бинарно-ориентированное программирование), возможно --
       отсутствие multicore; сложная история с Webdev (оно есть, но своеобразное)
  9. [ ] Если писать проект на ocaml — где брать программистов?
     * [ ] В профильных чатах/форумах и т.п., обучать самостоятельно
       (доки оч. хорошие, порог достаточно низкий для
       самостоятельного изучения без Ph.D.)

* Ресурсы на почитать/посмотреть/погуглить

  1. OCaml per se
     * https://ocaml.org
     * https://ru.wikipedia.org/wiki/OCaml
  2. Multicore OCaml
     * http://ocamllabs.io/doc/multicore.html
  3. Экосистема
     * https://github.com/rizo/awesome-ocaml
     * https://opam.ocaml.org
     * https://github.com/ocaml/tuareg
     * https://github.com/ocaml/merlin
     * https://github.com/ocaml/oasis
     * http://ocamllabs.io
     * https://github.com/janestreet/core
     * http://ocsigen.org (NB: Web development tools'n'libs)
     * https://mirage.io (NB: Unikernel-hosted site about Unikernel OS)
  4. Success'n'users
     * http://fsharp.org
     * http://hacklang.org
     * https://flow.org
     * https://github.com/facebook/pfff/wiki/Main
     * https://reasonml.github.io
     * http://haxe.org
     * https://github.com/xapi-project/
     * https://blog.janestreet.com/tag/ocaml/
     * https://coq.inria.fr
     * https://www.cis.upenn.edu/~bcpierce/unison/
